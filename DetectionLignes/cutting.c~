#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>

SDL_Texture* loadTexture(SDL_Renderer *renderer, const char *file) {
    SDL_Surface *surface = IMG_Load(file);
    if (!surface) {
        printf("Erreur lors du chargement de l'image : %s\n", IMG_GetError());
        exit(1);
    }

    SDL_Texture *texture = SDL_CreateTextureFromSurface(renderer, surface);
    SDL_FreeSurface(surface);
    return texture;
}

void drawImage(SDL_Renderer *renderer, SDL_Texture *texture, SDL_Rect *srcRect, SDL_Rect *destRect) {
    SDL_RenderCopy(renderer, texture, srcRect, destRect);
}

int main(int argc, char *argv[]) {
    if (argc != 3) {
        printf("Usage: %s <chemin_image_entree> <chemin_image_sortie>\n", argv[0]);
        return 1;
    }

    SDL_Init(SDL_INIT_VIDEO);

    SDL_Window *window = SDL_CreateWindow("Sudoku Grid", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 800, 600, 0);
    SDL_Renderer *renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);

    // Charger l'image depuis le chemin d'entrée
    SDL_Texture *imageTexture = loadTexture(renderer, argv[1]);

    // Les coordonnées des quatre coins de la région à découper
    int x1 = 100;
    int y1 = 100;
    int x2 = 300;
    int y2 = 100;
    int x3 = 300;
    int y3 = 300;
    int x4 = 100;
    int y4 = 300;

    // Calculer les dimensions de la région à découper
    int width = abs(x2 - x1);
    int height = abs(y3 - y1);

    // Les coordonnées du coin supérieur gauche de la région à découper
    int startX = fmin(x1, fmin(x2, fmin(x3, x4)));
    int startY = fmin(y1, fmin(y2, fmin(y3, y4)));

    SDL_Rect srcRect = {startX, startY, width, height}; // Rectangle source (la région à découper)
    SDL_Rect destRect = {0, 0, width, height};         // Rectangle de destination (où dessiner la découpe)

    SDL_RenderSetViewport(renderer, &srcRect);
    drawImage(renderer, imageTexture, &srcRect, &destRect);

    SDL_RenderPresent(renderer);

    // Sauvegarder l'image résultante au format BMP (modifiable en fonction de vos besoins)
    SDL_Surface *resultSurface = SDL_CreateRGBSurface(0, width, height, 32, 0, 0, 0, 0);
    SDL_RenderReadPixels(renderer, &srcRect, SDL_PIXELFORMAT_ARGB8888, resultSurface->pixels, resultSurface->pitch);
    SDL_SaveBMP(resultSurface, argv[2]);

    // Libération des ressources
    SDL_FreeSurface(resultSurface);
    SDL_DestroyTexture(imageTexture);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}
